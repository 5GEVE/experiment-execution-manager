/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.nextworks.eem.api;

import io.swagger.annotations.*;
import it.nextworks.eem.model.ConfigurationChangeNotification;
import it.nextworks.eem.model.ErrorInfo;
import it.nextworks.eem.model.ExperimentExecution;
import it.nextworks.eem.model.ExperimentExecutionInfo;
import it.nextworks.eem.model.ExperimentExecutionResponse;
import it.nextworks.eem.model.ExperimentExecutionSubscription;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-11-27T13:24:37.065Z[GMT]")
@Api(value = "eem", description = "the eem API")
public interface EemApi {

    @ApiOperation(value = "List all experiments available", nickname = "eemExperimentsExecutionGet", notes = "", response = ExperimentExecutionInfo.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all experiments", response = ExperimentExecutionInfo.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution",
        produces = { "application/json", "ErrorDetails" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ExperimentExecutionInfo>> eemExperimentsExecutionGet(@ApiParam(value = "Execution state of the experiment", allowableValues = "INIT, CONFIGURING, RUNNING, RUNNING_STEP, PAUSED, VALIDATING, COMPLETED, ABORTING, ABORTED, FAILED") @Valid @RequestParam(value = "status", required = false) String status);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdAbortPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found"),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}/abort",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> eemExperimentsExecutionIdAbortPost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Return 204 No content upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the Experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eemExperimentsExecutionIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdGet", notes = "API to get experiment execution details", response = ExperimentExecution.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return experiment execution details", response = ExperimentExecution.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}",
        produces = { "ExperimentExecution", "ErrorDetails" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExperimentExecution> eemExperimentsExecutionIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion") })
    @RequestMapping(value = "/eem/experiments_execution/{id}",
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemExperimentsExecutionIdOptions(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdPausePost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found"),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}/pause",
        produces = { "ErrorDetails", "ErrorInfo" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> eemExperimentsExecutionIdPausePost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdRunPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}/run",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> eemExperimentsExecutionIdRunPost(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "Determine the type of run. If not present, the default value is RUN_ALL" , allowableValues="RUN_IN_STEPS, RUN_ALL") @RequestHeader(value="runType", required=false) String runType);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionIdStepPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution/{id}/step",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> eemExperimentsExecutionIdStepPost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentsExecutionOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The Option operation is needed for compatibility reasons with JS applications") })
    @RequestMapping(value = "/eem/experiments_execution",
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemExperimentsExecutionOptions();


    @ApiOperation(value = "Requests a new experiment execution", nickname = "eemExperimentsExecutionPost", notes = "", response = ExperimentExecutionResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Experiment execution identifier", response = ExperimentExecutionResponse.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiments_execution",
        produces = { "application/json", "ErrorDetails" }, 
        method = RequestMethod.POST)
    ResponseEntity<ExperimentExecutionResponse> eemExperimentsExecutionPost();


    @ApiOperation(value = "", nickname = "eemNotificationsGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Default returned value in case the subscribers checks the notification endpoint") })
    @RequestMapping(value = "/eem/notifications",
        method = RequestMethod.GET)
    ResponseEntity<Void> eemNotificationsGet();


    @ApiOperation(value = "", nickname = "eemNotificationsOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content should be returned.") })
    @RequestMapping(value = "/eem/notifications",
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemNotificationsOptions();


    @ApiOperation(value = "", nickname = "eemNotificationsPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No response body is sent as response of a notification") })
    @RequestMapping(value = "/eem/notifications",
        consumes = { "ConfigurationChangeState" },
        method = RequestMethod.POST)
    ResponseEntity<Void> eemNotificationsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ConfigurationChangeNotification body);


    @ApiOperation(value = "", nickname = "eemOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The Option operation is needed for compatibility reasons with JS applications") })
    @RequestMapping(value = "/eem/",
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemOptions();


    @ApiOperation(value = "", nickname = "eemSubscriptionsGet", notes = "", response = ExperimentExecutionSubscription.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return list of subscriptions to the Experiment Execution Manager", response = ExperimentExecutionSubscription.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/subscriptions",
        produces = { "application/json", "ErrorDetails" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ExperimentExecutionSubscription>> eemSubscriptionsGet();


    @ApiOperation(value = "", nickname = "eemSubscriptionsOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content is expected on OPTION ReST request"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/subscriptions",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemSubscriptionsOptions();


    @ApiOperation(value = "", nickname = "eemSubscriptionsPost", notes = "", response = ExperimentExecutionSubscription.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Creates a new subscription to the Execution Experiment Manager", response = ExperimentExecutionSubscription.class),
        @ApiResponse(code = 303, message = "Subscription already exists", response = ErrorInfo.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorInfo.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/subscriptions",
        produces = { "ExperimentExecutionSubscription", "ErrorDetails" }, 
        consumes = { "ExperimentExecutionSubscriptionRequest" },
        method = RequestMethod.POST)
    ResponseEntity<ExperimentExecutionSubscription> eemSubscriptionsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExperimentExecutionSubscription body);


    @ApiOperation(value = "", nickname = "eemSubscriptionsSubscriptionIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content is returned. Subscription is removed"),
        @ApiResponse(code = 400, message = "Bad request. Malformed request", response = ErrorInfo.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/subscriptions/{subscriptionId}",
        produces = { "ErrorDetails" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eemSubscriptionsSubscriptionIdDelete(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);


    @ApiOperation(value = "", nickname = "eemSubscriptionsSubscriptionIdGet", notes = "", response = ExperimentExecutionSubscription.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns experiment execution subscription for the id provided on the path", response = ExperimentExecutionSubscription.class),
        @ApiResponse(code = 400, message = "Bad request. Malformed request", response = ErrorInfo.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/subscriptions/{subscriptionId}",
        produces = { "ExperimentExecutionSubscription", "ErrorDetails" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExperimentExecutionSubscription> eemSubscriptionsSubscriptionIdGet(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);


    @ApiOperation(value = "", nickname = "eemSubscriptionsSubscriptionIdOptions", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/eem/subscriptions/{subscriptionId}",
        method = RequestMethod.OPTIONS)
    ResponseEntity<Void> eemSubscriptionsSubscriptionIdOptions(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);


    @ApiOperation(value = "List API versions", nickname = "listVersionsv1", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "200 response"),
        @ApiResponse(code = 300, message = "300 response") })
    @RequestMapping(value = "/eem/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> listVersionsv1();

}

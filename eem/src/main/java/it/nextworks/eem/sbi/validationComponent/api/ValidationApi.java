/*
 * RAV API
 * RAV API
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: name@mail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.nextworks.eem.sbi.validationComponent.api;

import it.nextworks.eem.sbi.validationComponent.model.*;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ValidationApi {
    private ApiClient apiClient;

    public ValidationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ValidationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getConfigurationExp
     * @param expID Identifier of experiment  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConfigurationExpCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/configuration/{expID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConfigurationExpValidateBeforeCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling getConfigurationExp(Async)");
        }
        
        com.squareup.okhttp.Call call = getConfigurationExpCall(expID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get the configuration for an experiment
     * Returns the current configuration of the RAV module 
     * @param expID Identifier of experiment  (required)
     * @return ConfigurationDict
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationDict getConfigurationExp(String expID) throws ApiException {
        ApiResponse<ConfigurationDict> resp = getConfigurationExpWithHttpInfo(expID);
        return resp.getData();
    }

    /**
     * get the configuration for an experiment
     * Returns the current configuration of the RAV module 
     * @param expID Identifier of experiment  (required)
     * @return ApiResponse&lt;ConfigurationDict&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationDict> getConfigurationExpWithHttpInfo(String expID) throws ApiException {
        com.squareup.okhttp.Call call = getConfigurationExpValidateBeforeCall(expID, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationDict>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the configuration for an experiment (asynchronously)
     * Returns the current configuration of the RAV module 
     * @param expID Identifier of experiment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConfigurationExpAsync(String expID, final ApiCallback<ConfigurationDict> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConfigurationExpValidateBeforeCall(expID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationDict>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExpResults
     * @param expID Identifier of experiment  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExpResultsCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queue/{expID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExpResultsValidateBeforeCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling getExpResults(Async)");
        }
        
        com.squareup.okhttp.Call call = getExpResultsCall(expID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * dump results for specific experiment
     * Returns the results of the specific experiment 
     * @param expID Identifier of experiment  (required)
     * @return ValidationResultsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResultsInstance getExpResults(String expID) throws ApiException {
        ApiResponse<ValidationResultsInstance> resp = getExpResultsWithHttpInfo(expID);
        return resp.getData();
    }

    /**
     * dump results for specific experiment
     * Returns the results of the specific experiment 
     * @param expID Identifier of experiment  (required)
     * @return ApiResponse&lt;ValidationResultsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResultsInstance> getExpResultsWithHttpInfo(String expID) throws ApiException {
        com.squareup.okhttp.Call call = getExpResultsValidateBeforeCall(expID, null, null);
        Type localVarReturnType = new TypeToken<ValidationResultsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * dump results for specific experiment (asynchronously)
     * Returns the results of the specific experiment 
     * @param expID Identifier of experiment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExpResultsAsync(String expID, final ApiCallback<ValidationResultsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExpResultsValidateBeforeCall(expID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResultsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResultsCommand
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResultsCommandCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResultsCommandValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getResultsCommandCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * dump list of active RAV instances
     * Returns the list of all the rav instances 
     * @return ValidationResultsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationResultsList getResultsCommand() throws ApiException {
        ApiResponse<ValidationResultsList> resp = getResultsCommandWithHttpInfo();
        return resp.getData();
    }

    /**
     * dump list of active RAV instances
     * Returns the list of all the rav instances 
     * @return ApiResponse&lt;ValidationResultsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationResultsList> getResultsCommandWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getResultsCommandValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ValidationResultsList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * dump list of active RAV instances (asynchronously)
     * Returns the list of all the rav instances 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResultsCommandAsync(final ApiCallback<ValidationResultsList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getResultsCommandValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationResultsList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTcResults
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTcResultsCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/queue/{expID}/{tcID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()))
            .replaceAll("\\{" + "tcID" + "\\}", apiClient.escapeString(tcID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTcResultsValidateBeforeCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling getTcResults(Async)");
        }
        // verify the required parameter 'tcID' is set
        if (tcID == null) {
            throw new ApiException("Missing the required parameter 'tcID' when calling getTcResults(Async)");
        }
        
        com.squareup.okhttp.Call call = getTcResultsCall(expID, tcID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * dump results for specific testcase
     * Returns the results of the specific testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return ValidationTestcaseResultsInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidationTestcaseResultsInstance getTcResults(String expID, String tcID) throws ApiException {
        ApiResponse<ValidationTestcaseResultsInstance> resp = getTcResultsWithHttpInfo(expID, tcID);
        return resp.getData();
    }

    /**
     * dump results for specific testcase
     * Returns the results of the specific testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return ApiResponse&lt;ValidationTestcaseResultsInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidationTestcaseResultsInstance> getTcResultsWithHttpInfo(String expID, String tcID) throws ApiException {
        com.squareup.okhttp.Call call = getTcResultsValidateBeforeCall(expID, tcID, null, null);
        Type localVarReturnType = new TypeToken<ValidationTestcaseResultsInstance>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * dump results for specific testcase (asynchronously)
     * Returns the results of the specific testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTcResultsAsync(String expID, String tcID, final ApiCallback<ValidationTestcaseResultsInstance> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTcResultsValidateBeforeCall(expID, tcID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidationTestcaseResultsInstance>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for removeExperiment
     * @param expID Identifier of experiment  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call removeExperimentCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/remove/{expID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call removeExperimentValidateBeforeCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling removeExperiment(Async)");
        }
        
        com.squareup.okhttp.Call call = removeExperimentCall(expID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * remove a finished experiment
     * Remove an experiment instance that has finished 
     * @param expID Identifier of experiment  (required)
     * @return ControlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControlResponse removeExperiment(String expID) throws ApiException {
        ApiResponse<ControlResponse> resp = removeExperimentWithHttpInfo(expID);
        return resp.getData();
    }

    /**
     * remove a finished experiment
     * Remove an experiment instance that has finished 
     * @param expID Identifier of experiment  (required)
     * @return ApiResponse&lt;ControlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControlResponse> removeExperimentWithHttpInfo(String expID) throws ApiException {
        com.squareup.okhttp.Call call = removeExperimentValidateBeforeCall(expID, null, null);
        Type localVarReturnType = new TypeToken<ControlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * remove a finished experiment (asynchronously)
     * Remove an experiment instance that has finished 
     * @param expID Identifier of experiment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call removeExperimentAsync(String expID, final ApiCallback<ControlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = removeExperimentValidateBeforeCall(expID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setConfigurationExp
     * @param body New configuration for the module (required)
     * @param expID Identifier of experiment  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setConfigurationExpCall(ConfigurationDict body, String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/configuration/{expID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setConfigurationExpValidateBeforeCall(ConfigurationDict body, String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setConfigurationExp(Async)");
        }
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling setConfigurationExp(Async)");
        }
        
        com.squareup.okhttp.Call call = setConfigurationExpCall(body, expID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * adds configuration for an experiment
     * Sets a new configuration on the RAV module
     * @param body New configuration for the module (required)
     * @param expID Identifier of experiment  (required)
     * @return ConfigurationResp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ConfigurationResp setConfigurationExp(ConfigurationDict body, String expID) throws ApiException {
        ApiResponse<ConfigurationResp> resp = setConfigurationExpWithHttpInfo(body, expID);
        return resp.getData();
    }

    /**
     * adds configuration for an experiment
     * Sets a new configuration on the RAV module
     * @param body New configuration for the module (required)
     * @param expID Identifier of experiment  (required)
     * @return ApiResponse&lt;ConfigurationResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ConfigurationResp> setConfigurationExpWithHttpInfo(ConfigurationDict body, String expID) throws ApiException {
        com.squareup.okhttp.Call call = setConfigurationExpValidateBeforeCall(body, expID, null, null);
        Type localVarReturnType = new TypeToken<ConfigurationResp>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * adds configuration for an experiment (asynchronously)
     * Sets a new configuration on the RAV module
     * @param body New configuration for the module (required)
     * @param expID Identifier of experiment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setConfigurationExpAsync(ConfigurationDict body, String expID, final ApiCallback<ConfigurationResp> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setConfigurationExpValidateBeforeCall(body, expID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ConfigurationResp>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTestcaseValidationStatus
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTestcaseValidationStatusCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/status/{expID}/{tcID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()))
            .replaceAll("\\{" + "tcID" + "\\}", apiClient.escapeString(tcID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTestcaseValidationStatusValidateBeforeCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling showTestcaseValidationStatus(Async)");
        }
        // verify the required parameter 'tcID' is set
        if (tcID == null) {
            throw new ApiException("Missing the required parameter 'tcID' when calling showTestcaseValidationStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = showTestcaseValidationStatusCall(expID, tcID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * show validation status
     * Show the status of the validation 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return StatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StatusResponse showTestcaseValidationStatus(String expID, String tcID) throws ApiException {
        ApiResponse<StatusResponse> resp = showTestcaseValidationStatusWithHttpInfo(expID, tcID);
        return resp.getData();
    }

    /**
     * show validation status
     * Show the status of the validation 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return ApiResponse&lt;StatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StatusResponse> showTestcaseValidationStatusWithHttpInfo(String expID, String tcID) throws ApiException {
        com.squareup.okhttp.Call call = showTestcaseValidationStatusValidateBeforeCall(expID, tcID, null, null);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * show validation status (asynchronously)
     * Show the status of the validation 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTestcaseValidationStatusAsync(String expID, String tcID, final ApiCallback<StatusResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTestcaseValidationStatusValidateBeforeCall(expID, tcID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StatusResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startTestcaseValidation
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startTestcaseValidationCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/validate/{expID}/{tcID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()))
            .replaceAll("\\{" + "tcID" + "\\}", apiClient.escapeString(tcID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startTestcaseValidationValidateBeforeCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling startTestcaseValidation(Async)");
        }
        // verify the required parameter 'tcID' is set
        if (tcID == null) {
            throw new ApiException("Missing the required parameter 'tcID' when calling startTestcaseValidation(Async)");
        }
        
        com.squareup.okhttp.Call call = startTestcaseValidationCall(expID, tcID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * start testcase validation
     * Start the validation of the requests testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return CommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommandResponse startTestcaseValidation(String expID, String tcID) throws ApiException {
        ApiResponse<CommandResponse> resp = startTestcaseValidationWithHttpInfo(expID, tcID);
        return resp.getData();
    }

    /**
     * start testcase validation
     * Start the validation of the requests testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return ApiResponse&lt;CommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommandResponse> startTestcaseValidationWithHttpInfo(String expID, String tcID) throws ApiException {
        com.squareup.okhttp.Call call = startTestcaseValidationValidateBeforeCall(expID, tcID, null, null);
        Type localVarReturnType = new TypeToken<CommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * start testcase validation (asynchronously)
     * Start the validation of the requests testcase 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startTestcaseValidationAsync(String expID, String tcID, final ApiCallback<CommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startTestcaseValidationValidateBeforeCall(expID, tcID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for terminateCurrentTestcase
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateCurrentTestcaseCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/terminate/{expID}/{tcID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()))
            .replaceAll("\\{" + "tcID" + "\\}", apiClient.escapeString(tcID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateCurrentTestcaseValidateBeforeCall(String expID, String tcID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling terminateCurrentTestcase(Async)");
        }
        // verify the required parameter 'tcID' is set
        if (tcID == null) {
            throw new ApiException("Missing the required parameter 'tcID' when calling terminateCurrentTestcase(Async)");
        }
        
        com.squareup.okhttp.Call call = terminateCurrentTestcaseCall(expID, tcID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * terminate current testcase of experiment
     * Terminates the current testcase of the experiment 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return CommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommandResponse terminateCurrentTestcase(String expID, String tcID) throws ApiException {
        ApiResponse<CommandResponse> resp = terminateCurrentTestcaseWithHttpInfo(expID, tcID);
        return resp.getData();
    }

    /**
     * terminate current testcase of experiment
     * Terminates the current testcase of the experiment 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @return ApiResponse&lt;CommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommandResponse> terminateCurrentTestcaseWithHttpInfo(String expID, String tcID) throws ApiException {
        com.squareup.okhttp.Call call = terminateCurrentTestcaseValidateBeforeCall(expID, tcID, null, null);
        Type localVarReturnType = new TypeToken<CommandResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * terminate current testcase of experiment (asynchronously)
     * Terminates the current testcase of the experiment 
     * @param expID Identifier of experiment  (required)
     * @param tcID Identifier of testcase  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateCurrentTestcaseAsync(String expID, String tcID, final ApiCallback<CommandResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateCurrentTestcaseValidateBeforeCall(expID, tcID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CommandResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for terminateExperiment
     * @param expID Identifier of experiment  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call terminateExperimentCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/terminate/{expID}"
            .replaceAll("\\{" + "expID" + "\\}", apiClient.escapeString(expID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call terminateExperimentValidateBeforeCall(String expID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'expID' is set
        if (expID == null) {
            throw new ApiException("Missing the required parameter 'expID' when calling terminateExperiment(Async)");
        }
        
        com.squareup.okhttp.Call call = terminateExperimentCall(expID, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * terminate the experiment
     * Terminates the experiment 
     * @param expID Identifier of experiment  (required)
     * @return ControlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ControlResponse terminateExperiment(String expID) throws ApiException {
        ApiResponse<ControlResponse> resp = terminateExperimentWithHttpInfo(expID);
        return resp.getData();
    }

    /**
     * terminate the experiment
     * Terminates the experiment 
     * @param expID Identifier of experiment  (required)
     * @return ApiResponse&lt;ControlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ControlResponse> terminateExperimentWithHttpInfo(String expID) throws ApiException {
        com.squareup.okhttp.Call call = terminateExperimentValidateBeforeCall(expID, null, null);
        Type localVarReturnType = new TypeToken<ControlResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * terminate the experiment (asynchronously)
     * Terminates the experiment 
     * @param expID Identifier of experiment  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call terminateExperimentAsync(String expID, final ApiCallback<ControlResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = terminateExperimentValidateBeforeCall(expID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ControlResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package it.nextworks.eem.api;

import it.nextworks.eem.model.ExperimentExecutionRequest;
import it.nextworks.eem.model.ExperimentExecutionSubscription;
import it.nextworks.eem.model.ConfigurationChangeNotification;
import it.nextworks.eem.model.ErrorInfo;
import it.nextworks.eem.model.ExperimentExecution;
import it.nextworks.eem.model.ExperimentExecutionSubscriptionRequest;
import it.nextworks.eem.model.enumerates.ExperimentState;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-12-03T08:24:25.833Z[GMT]")
@Api(value = "eem", description = "the eem API")
public interface EemApi {

    @ApiOperation(value = "List all experiments available", nickname = "eemExperimentExecutionsGet", notes = "", response = ExperimentExecution.class, responseContainer = "List", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of all experiments", response = ExperimentExecution.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> eemExperimentExecutionsGet(@ApiParam(value = "Execution state of the experiment") @Valid @RequestParam(value = "state", required = false) ExperimentState state);

    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdAbortPost", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}/abort",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsIdAbortPost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdDelete", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Return 204 No content upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the Experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> eemExperimentExecutionsIdDelete(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdGet", notes = "API to get experiment execution details", response = ExperimentExecution.class, tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return experiment execution details", response = ExperimentExecution.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 412, message = "Precondition Failed", response = ErrorInfo.class)})
    @RequestMapping(value = "/eem/experiment_executions/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> eemExperimentExecutionsIdGet(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdOptions", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion") })
    @RequestMapping(value = "/eem/experiment_executions/{id}",
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemExperimentExecutionsIdOptions(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdPausePost", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}/pause",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsIdPausePost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdResumePost", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}/resume",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsIdResumePost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdRunPost", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 400, message = "Malformatted request", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}/run",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsIdRunPost(@ApiParam(value = "" ,required=true )  @RequestBody ExperimentExecutionRequest body, @ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiParam(value = "Determine the type of run. If not present, the default value is RUN_ALL" , allowableValues="RUN_IN_STEPS, RUN_ALL") @RequestParam(value="runType", required=false) String runType);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsIdStepPost", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return 200 OK upon action completion"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Identifier of the experiment execution not found", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions/{id}/step",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsIdStepPost(@ApiParam(value = "",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "", nickname = "eemExperimentExecutionsOptions", notes = "", tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The Option operation is needed for compatibility reasons with JS     applications") })
    @RequestMapping(value = "/eem/experiment_executions",
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemExperimentExecutionsOptions();


    @ApiOperation(value = "Requests a new experiment execution", nickname = "eemExperimentExecutionsPost", notes = "", response = String.class, tags={ "EEM Operations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Experiment execution identifier", response = String.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 412, message = "Precondition Failed", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_executions",
        produces = { "text/plain", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentExecutionsPost();


    @ApiOperation(value = "", nickname = "eemExperimentNotificationsGet", notes = "", tags={ "EEM Notifications", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Default returned value in case the subscribers checks the notification endpoint") })
    @RequestMapping(value = "/eem/experiment_notifications",
        method = RequestMethod.GET)
    ResponseEntity<?> eemExperimentNotificationsGet();


    @ApiOperation(value = "", nickname = "eemExperimentNotificationsOptions", notes = "", tags={ "EEM Notifications", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content should be returned.") })
    @RequestMapping(value = "/eem/experiment_notifications",
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemExperimentNotificationsOptions();


    @ApiOperation(value = "", nickname = "eemExperimentNotificationsPost", notes = "", tags={ "EEM Notifications", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No response body is sent as response of a notification") })
    @RequestMapping(value = "/eem/experiment_notifications",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentNotificationsPost(@ApiParam(value = "" ,required=true )  @RequestBody ConfigurationChangeNotification body);


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsGet", notes = "", response = ExperimentExecutionSubscription.class, responseContainer = "List", tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Return list of subscriptions to the Experiment Execution Manager", response = ExperimentExecutionSubscription.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> eemExperimentSubscriptionsGet();


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsOptions", notes = "", tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content is expected on OPTION ReST request"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_subscriptions",
        produces = { "application/json" }, 
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemExperimentSubscriptionsOptions();


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsPost", notes = "", response = String.class, tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Creates a new subscription to the Execution Experiment Manager", response = String.class),
        @ApiResponse(code = 303, message = "Subscription already exists", response = ErrorInfo.class),
        @ApiResponse(code = 400, message = "Bad request", response = ErrorInfo.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 412, message = "Precondition Failed", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_subscriptions",
        produces = { "text/plain", "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> eemExperimentSubscriptionsPost(@ApiParam(value = "" ,required=true )  @RequestBody ExperimentExecutionSubscriptionRequest body);


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsSubscriptionIdDelete", notes = "", tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content is returned. Subscription is removed"),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_subscriptions/{subscriptionId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> eemExperimentSubscriptionsSubscriptionIdDelete(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsSubscriptionIdGet", notes = "", response = ExperimentExecutionSubscription.class, tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Returns experiment execution subscription for the id provided on the path", response = ExperimentExecutionSubscription.class),
        @ApiResponse(code = 400, message = "Bad request. Malformed request", response = ErrorInfo.class),
        @ApiResponse(code = 401, message = "Operation not authorised", response = ErrorInfo.class),
        @ApiResponse(code = 403, message = "Operation forbidden", response = ErrorInfo.class),
        @ApiResponse(code = 404, message = "Return error details", response = ErrorInfo.class),
        @ApiResponse(code = 500, message = "Operation failed", response = ErrorInfo.class),
        @ApiResponse(code = 501, message = "Operation not implemented", response = ErrorInfo.class) })
    @RequestMapping(value = "/eem/experiment_subscriptions/{subscriptionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> eemExperimentSubscriptionsSubscriptionIdGet(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);


    @ApiOperation(value = "", nickname = "eemExperimentSubscriptionsSubscriptionIdOptions", notes = "", tags={ "EEM Subscriptions", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/eem/experiment_subscriptions/{subscriptionId}",
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemExperimentSubscriptionsSubscriptionIdOptions(@ApiParam(value = "",required=true) @PathVariable("subscriptionId") String subscriptionId);

    @ApiOperation(value = "", nickname = "eemOptions", notes = "", tags={ "EEM Application", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The Option operation is needed for compatibility reasons with JS applications") })
    @RequestMapping(value = "/eem/",
        method = RequestMethod.OPTIONS)
    ResponseEntity<?> eemOptions();


    @ApiOperation(value = "List API versions", nickname = "listVersionsv1", notes = "", tags={ "EEM Application", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "200 response"),
        @ApiResponse(code = 300, message = "300 response") })
    @RequestMapping(value = "/eem/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> listVersionsv1();

}
